
{{ 'ajaxinate.min.js' | asset_url | script_tag }}

<script>
  function ajaxinateCallback() {
    /**
     * Add any JS code that you want to run after "Load more"
     */

     

  }


  document.body.classList.add('navbar--solid');

  const container = '#product-grid';
  const pagination = '#AjaxinatePagination';

  const containerElement = document.querySelector(container);
  const paginationElement = document.querySelector(pagination);

  function loadProducts(page, callback =() => {}) {
    let nextPageUrl = new URL(location.href);
    nextPageUrl.searchParams.set('page', page);
    nextPageUrl.hash = '';

    nextPageUrl = nextPageUrl.toString();

    console.log({nextPageUrl});


    const request = new XMLHttpRequest();
    request.onreadystatechange = function success() {

      if (request.readyState === 4 && request.status === 200) {

        var newContainer = request.responseXML.querySelectorAll(container)[0];
        var newPagination = request.responseXML.querySelectorAll(pagination)[0];

        // containerElement.insertAdjacentHTML('beforeend', newContainer.innerHTML);
        // paginationElement.innerHTML = newPagination.innerHTML;

        const data = {
          newContainer,
          newPagination
        }
        callback(data);

        // this.initialize();
      }
    };

    request.open('GET', nextPageUrl);
    request.responseType = 'document';
    request.send();
  };

  function loadTillPage(n) {
    const resultList = new Array(n + 1);

    function updateDOM() {
      const isLoadingCompleted = resultList.filter(item => !!item).length == resultList.length - 2;

      if (isLoadingCompleted) {
        resultList.forEach((data, index) => {
          if (!data) 
            return;
          

          const isLast = index == resultList.length - 1;
          const {newContainer, newPagination} = data;


          if (isLast) {
            $(window).scrollTop(paginationElement.offsetTop);
            console.log(paginationElement.getBoundingClientRect().top);
          }

          containerElement.insertAdjacentHTML('beforeend', newContainer.innerHTML);
          paginationElement.innerHTML = newPagination.innerHTML;

        });


        if (typeof window.endlessScroll !== 'undefined') {
          window.endlessScroll.initialize();
        }

        ajaxinateCallback();


      }
    }

    for (let i = 2; i <= n; i++) {
      loadProducts(i, function(data) {
        resultList[i] = data;
        updateDOM();
      });
    }
  }

  
  const hash = location.hash.replace('#', '');
  if (hash.includes('page-')) {
    const page = + hash.replace('page-', '');
    console.log({page});
    loadTillPage(page);
  }

  document.addEventListener("DOMContentLoaded", function() {
    window.endlessScroll = new Ajaxinate({
      container: '#product-grid',
      method: 'click',
      callback: function(data) {
        var body = document.body;

        // updateProductsCount();
        body.classList.remove("ajaxinate--loading");

        ajaxinateCallback();

        const params = (new URL(data.URL)).searchParams;
        const page = params.get('page');

        window.location.hash = `page-${page}`;
      }
    });
  });

</script>