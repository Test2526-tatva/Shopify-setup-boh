{% comment %}
This script appears to be written in Liquid, a templating language used by Shopify. It's primarily used for handling product labels and badges, such as "New", "Sale", "Pre-Order", etc., based on product tags and other conditions. Here is a commented version of the code:
{% endcomment %}

{% comment %}
Initialize an empty label. 
This will be filled with the value of the product's badge, or based on the product's tags.
{% endcomment %}
{% assign label = '' %}

{% comment %}
Fetch the product's badge value from its metafields, removing any leading/trailing whitespace.
{% endcomment %}
{% assign metafield_badge = product.metafields.pdp.badge.value | strip %}

{% comment %}
If the badge metafield is not empty, assign its value to the label.
Otherwise, set up a label based on the product's tags.
{% endcomment %}
{% if metafield_badge != '' %}
  {% assign label = metafield_badge %}
{% else %}
  {% assign click_collect_label = 'Click + Collect Only' %}
  
  {% comment %}
  Loop through all the product's tags. 
  If the label matches the click_collect_label, stop processing the rest of the tags.
  {% endcomment %}
  {% for product_tag in product.tags %}
    
    {% if label == click_collect_label %}
      {% break %}
    {% endif %}

    {% assign product_tag_lowercase = product_tag | downcase %}
    
    {% comment %}
    Depending on the product's tag, assign the appropriate label.
    {% endcomment %}
    {% case product_tag_lowercase %}
      {% when 'new' %}
        {% assign tag = product_tag %}
        {% assign label = 'New' %}
      {% when 'sale' %}
        {% assign tag = product_tag %}
        {% assign label = 'Sale' %}
      {% when 'pre-order' %}
        {% assign tag = product_tag %}
        {% assign label = 'Pre-Order' %}
      {% when 'final-sale' %}
        {% assign tag = product_tag %}
        {% assign label = 'Final Sale' %}
      {% when 'coming-soon' %}
        {% assign tag = product_tag %}
        {% assign label = 'Coming Soon' %}
      {% when 'click-collect' %}
        {% assign tag = product_tag %}
        {% assign label = click_collect_label %}
        {% break %}
    {% endcase %}
  {% endfor %}

  {% comment %}
  If the product has a valid rent_url, assign the label "Rental".
  {% endcomment %}
  {% assign rent_url = product.metafields.rentme.url.value | trim %}
  {% if rent_url != '' and rent_url != blank %}
    {% assign tag = false %}
    {% assign label = 'Rental' %}
  {% endif %}

  {% comment %}
  Check if the product's tags include any exclusive tags. 
  If they do, assign the label for exclusive products.
  {% endcomment %}
  {% assign exclusive_allowed = false %}
  {% assign is_exclusive = false %}
  {% assign product_exclusive_tags = '' %}
  {% assign exclusive_tags = settings.exclusive_tags | newline_to_br | split: '<br />' %}
  {% for _eTag in exclusive_tags %}
    {% assign eTag = _eTag | strip %}
    {% if product.tags contains eTag %}
      {% assign is_exclusive = true %}
      {% capture product_exclusive_tags %}{{ product_exclusive_tags }},{{ eTag }}{% endcapture %}
    {% endif %}
  {% endfor %}

  {% comment %}
  If the product is exclusive, check if the current customer is allowed to access exclusive products.
  If they are, assign the label for allowed customers.


  {% endcomment %}
  {% assign product_exclusive_tags = product_exclusive_tags | split: ',' | compact %}
  {% if is_exclusive %}
    {% assign tag = false %}
    {% assign label = settings.label_exclusive_disallowed | strip %}
    {% if customer.id %}
      {% assign allowed_customers = settings.exclusive_customers | newline_to_br | split: '<br />' %}
      
      {% comment %}
      For each allowed customer, check if the current customer's tags match, 
      and if the product's exclusive tags contain the tag assigned to the customer.
      If they do, set exclusive_allowed to true.
      {% endcomment %}
      {% for aCustomer in allowed_customers %}
        {% assign props = aCustomer | split: '|' %}
        {% assign cTag = props | first | strip %}
        {% assign pTag = props | last | strip %}
        
        {% if customer.tags contains cTag %}
          {% if product_exclusive_tags contains pTag %}
            {% assign exclusive_allowed = true %}
            {% break %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}

  {% comment %}
  If the product is exclusive and the customer is allowed to access it, assign the allowed label.
  {% endcomment %}
  {% if exclusive_allowed %}
    {% assign label = settings.label_exclusive_allowed | strip %}
  {% endif %}
{% endif %}

{% comment %}
Depending on whether the view is a product card, a cart, or a product detail page, 
render the label in the appropriate HTML element.
{% endcomment %}
{% if is_product_card %}
  {% if label != '' %}
    <span class="product-card__badge">
      {{ label }}
    </span>
  {% endif %}
{% elsif is_cart %}
  {% if label != '' %}
    <span class="cart-item__badge">
      {{ label }}
    </span>
  {% endif %}
{% else %}
  <span class="js-badge-label"></span>
  <span class="no-stock--show coming-soon--hide">
    Out of Stock
  </span>

  {% comment %}
  If the product has a label, create a link with the label as the link text if a tag exists.
  If not, just display the label.
  Also add a class to certain elements depending on the label value.
  {% endcomment %}
  {% if label != '' %}
    {% if tag %}
      {% capture url %}/collections/all/{{ tag | handleize  }}{% endcapture %}
      <a href="{{ url }}" class="no-stock--hide pdp-main-badge">
        {{ label }}
      </a>
    {% else %}
      <span class="no-stock--hide pdp-main-badge">
        {{ label }}
      </span>
    {% endif %}
    {% assign add_class = label | handleize %}
    {% if is_exclusive %}
      {% assign add_class = 'coming-soon product--exclusive' %}
      {% if exclusive_allowed %}
        {% assign add_class = 'exclusive-allowed' %}
      {% endif %}
    {% endif %}
    <script>
      $('body').addClass('product--{{ add_class }}');
      $('.product-top__section').addClass('product--{{ add_class }}');
    </script>
    <div qv-add-class="product--{{ add_class }}"></div>
  {% endif %}
{% endif %}


{% comment %}
The script starts by retrieving the badge value from the product's metafields, and if none exists, it then iterates through the product's tags to assign a corresponding label. In the case of tags such as "new", "sale", "pre-order", etc., it assigns the matching label. 

It also checks if a product is available for

rent and assigns the "Rental" label if it is. 

For exclusive products, it checks the product's tags against a list of exclusive tags from the site's settings. If the product contains any exclusive tags, the script labels it as exclusive. If a customer is signed in, the script checks their tags against a list of customers allowed to view exclusive products. If the customer has an allowed tag and the product has a matching exclusive tag, the product is marked as accessible to the customer.

Finally, the script generates HTML to display the label on the webpage. The way the label is displayed differs depending on whether the current view is a product card, a cart, or a product detail page. The HTML generated also includes some JavaScript to add a class to the body of the page and another element, with the class name depending on the product's label.
{% endcomment %}