<input
  id='variant-id'
  name='id'
  type='hidden'
  value='{{ product.selected_or_first_available_variant.id }}'
>

<div class='product-main__options'>
  {% unless product.has_only_default_variant %}
    {% for option in product.options_with_values %}
      <div class='product-main__option-wrapper product-main__option-wrapper--{{ option.name | downcase }}'>
        <div class='product-main__option-name'>{{ option.name }}</div>
        {% if option.name == 'Metal' %}
          {% render 'product-option--metal', option: option %}

        {% else %}
          {% render 'product-option', option: option %}
        {% endif %}
      </div>
    {% endfor %}
  {% endunless %}
</div>

<input
  type='hidden'
  id='currency-symbol'
  name='currency_symbol'
  value='{{ cart.currency.symbol }}'
>

<script id='product-json' type='application/json'>
  {{ product | json }}
</script>

<script id='product-variant-prices' type='application/json'>
  [
      {% for variant in product.variants %}
      {
        "variant_id": "{{ variant.id }}",
        "price": "{{ variant.price |  money_without_trailing_zeros | default: 0 }}"
      }
      {% unless forloop.last %},{% endunless %}
      {% endfor %}
    ]
</script>

<script>
  window.product = {{ product | json }};
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const ProductOptions = {
      originalValue: null,
      hoverTimer: null,

      init: function () {
        this.bindEvents();
      },

      bindEvents: function () {
        $(document).on('click', '.product-main__option', this.handleOptionClick.bind(this));
        $(document).on('mouseenter', '.product-main__option--metal', this.handleMetalOptionMouseEnter.bind(this));
        $(document).on('mouseleave', '.product-main__option--metal', this.handleMetalOptionMouseLeave.bind(this));
      },

      handleOptionClick: function (event) {
        const $option = $(event.currentTarget);
        if ($option.hasClass('disabled')) return;

        this.updateActiveOption($option);
        this.updateMetalOption($option);
        this.updateVariant();
        this.updateAvailableOptions($option);
      },

      updateActiveOption: function ($option) {
        const $parentWrapper = $option.closest('.product-main__option-wrapper');
        $parentWrapper.find('.product-main__option').removeClass('active');
        $option.addClass('active');
      },

      updateMetalOption: function ($option) {
        if ($option.hasClass('product-main__option--metal')) {
          const value = $option.attr('data-value');
          $('.product-main__option-value--metal .product-main__option-value-item').removeClass('active');
          $(`.product-main__option-value--metal .product-main__option-value-item[data-value="${value}"]`).addClass(
            'active',
          );
          this.originalValue = value;
        }
      },

      updateVariant: function () {
        const selectedValues = $('.product-main__option.active')
          .map(function () {
            return $(this).attr('data-value');
          })
          .get();

        const matchingVariant = window.product.variants.find((variant) =>
          variant.options.every((opt, index) => opt === selectedValues[index]),
        );

        if (matchingVariant) {
          $('#variant-id').val(matchingVariant.id);
          this.updateURL(matchingVariant.id);
          this.updateGallery(matchingVariant.id);
        }
      },

      updateAvailableOptions: function ($clickedOption) {
        const clickedOptionPosition = parseInt($clickedOption.attr('data-position')) - 1;
        const clickedOptionValue = $clickedOption.attr('data-value');

        const matchingVariants = window.product.variants.filter(
          (variant) => variant.options[clickedOptionPosition] === clickedOptionValue,
        );

        $('.product-main__option-wrapper').each((index, wrapper) => {
          if (index !== clickedOptionPosition) {
            this.updateOptionAvailability($(wrapper), index, matchingVariants);
          }
        });

        this.ensureActiveOptionAvailable();
      },

      updateOptionAvailability: function ($optionWrapper, index, matchingVariants) {
        $optionWrapper.find('.product-main__option').each((_, option) => {
          const $option = $(option);
          const optionValue = $option.attr('data-value');

          const isAvailable = matchingVariants.some(
            (variant) => variant.options[index] === optionValue && variant.available,
          );

          $option.toggleClass('disabled', !isAvailable);
        });
      },

      ensureActiveOptionAvailable: function () {
        $('.product-main__option-wrapper').each((_, wrapper) => {
          const $activeOption = $(wrapper).find('.product-main__option.active');
          if ($activeOption.hasClass('disabled')) {
            const $firstAvailableOption = $(wrapper).find('.product-main__option:not(.disabled)').first();
            $activeOption.removeClass('active');
            $firstAvailableOption.addClass('active').trigger('click');
          }
        });
      },

      updateURL: function (variantId) {
        if (!variantId) return;
        window.history.replaceState({}, '', `${window.location.pathname}?variant=${variantId}`);
        $('[name="id"]').trigger('change');
      },

      handleMetalOptionMouseEnter: function (event) {
        clearTimeout(this.hoverTimer);
        const value = $(event.currentTarget).data('value');
        if (!this.originalValue) {
          this.originalValue = $('.product-main__option-value--metal .product-main__option-value-item.active').data(
            'value',
          );
        }
        $('.product-main__option-value--metal .product-main__option-value-item').removeClass('active');
        $(`.product-main__option-value--metal .product-main__option-value-item[data-value="${value}"]`).addClass(
          'active',
        );
      },

      handleMetalOptionMouseLeave: function () {
        this.hoverTimer = setTimeout(() => {
          $('.product-main__option-value--metal .product-main__option-value-item').removeClass('active');
          $(
            `.product-main__option-value--metal .product-main__option-value-item[data-value="${this.originalValue}"]`,
          ).addClass('active');
        }, 100);
      },

      updateGallery: function (variantId) {
        const gallery = document.querySelector('.product-main__gallery .swiper');
        if (!gallery) return;

        const swiper = gallery.swiper;
        if (!swiper) return;

        const slides = gallery.querySelectorAll('.swiper-slide');
        for (let i = 0; i < slides.length; i++) {
          const slide = slides[i];
          const variantIds = slide.getAttribute('variant-ids');
          const slideVariantId = slide.getAttribute('data-variant-id');

          if (
            (variantIds && variantIds.split(',').includes(variantId.toString())) ||
            (slideVariantId && slideVariantId === variantId.toString())
          ) {
            swiper.slideTo(i);
            break;
          }
        }
      },
    };

    ProductOptions.init();
  });
</script>
